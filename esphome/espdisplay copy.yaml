substitutions:
  esp_name: HA ePaper Display
  esp_hostname: esp-display
  ip_address: 192.168.1.107
  ip_gw: 192.168.1.1
  ip_netmask: 255.255.255.0
  run_time: 24h
  sleep_time: 2min

globals:
  - id: current_page
    restore_value: yes
    initial_value: "0"
    type: int
  - id: updates_since_refresh
    restore_value: yes
    initial_value: "0"
    type: int

esphome:
  name: ${esp_hostname}
  comment: ${esp_name}
  includes:
    - common.h

esp32:
  board: esp32dev
  framework:
    type: arduino

external_components:
  - source: "github://ashald/esphome@lilygo-t5-47"
    components:
      - lilygo_t5_47

# Enable logging
logger:

api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${ip_address}
    gateway: ${ip_gw}
    subnet: ${ip_netmask}
  ap:
    ssid: ${esp_name} Fallback"
    password: !secret ap_password

captive_portal:

web_server:
  port: 80
  include_internal: true

time:
  - platform: homeassistant
    id: ntp
    timezone: Australia/Sydney
    on_time_sync:
      - then:
          - component.update: sunrise
          - component.update: sunset

sun:
  latitude: -31.08°
  longitude: 150.94°

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: din_big
    size: 50
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Norican
    id: norican_60
    size: 60
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Roboto
      weight: 500
    id: din_med
    size: 30
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Roboto
    id: text_25
    size: 25
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Roboto
    id: text_20
    size: 20
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: text_25_bold
    size: 25
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"
  - file:
      type: gfonts
      family: Roboto
      weight: 700
    id: din_small_bold
    size: 15
    glyphs: "'!%()+=,-_.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ íëabcdefghijklmnopqrstuvwxyz&/"

  - file: "fonts/materialdesignicons-webfont.ttf"
    id: font_icons_small
    size: 40
    glyphs:
      - "\U000F04B2" # sleep
      - "\U000F02DC" # home
      - "\U000F13D7" # not_home
      - "\U000F12A3" # battery-high
      - "\U000F12A2" # battery-medium
      - "\U000F12A1" # battery-low
      - "\U000F008E" # battery-outline
      - "\U000F0510" # temp
      - "\U000F059D" # wind
      - "\U000F059B" # sunset
      - "\U000F059C" # sunrise

button:
  - platform: restart
    name: "${esp_name} Restart"

  - platform: template
    name: "${esp_name} Refresh"
    icon: "mdi:update"
    on_press:
      then:
        - component.update: t5_display

sensor:
  - id: battery
    name: ${esp_name} Battery
    platform: lilygo_t5_47
    unit_of_measurement: "%"
    accuracy_decimals: 1
    device_class: battery
    lambda: |-
      int y = (1-(4.1-id(batt_volt).state)/(4.1-3.3))*100;
      if (y < 100) {return y;} else {return 100;};

  - id: "battery_voltage"
    name: "${esp_name} Battery Voltage"
    platform: lilygo_t5_47
    unit_of_measurement: V
    state_class: measurement
    device_class: voltage
    update_interval: 15s

  - platform: wifi_signal
    name: "${esp_name} WiFi"
    update_interval: 60s

  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

  - platform: homeassistant
    id: temperature
    name: "Outdoor Temperature Sensor"
    entity_id: sensor.tempest_st_00056115_temperature

  - platform: homeassistant
    id: min_temp
    name: "Minimum Temperature"
    entity_id: sensor.tempest_st_00056115_temperature
    attribute: min_day

  - platform: homeassistant
    id: max_temp
    name: "Maximum Temperature"
    entity_id: sensor.tempest_st_00056115_temperature
    attribute: max_day

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${esp_name} IP Address"
      icon: mdi:wifi
      entity_category: diagnostic
    ssid:
      name: "${esp_name} Connected SSID"
      icon: mdi:wifi-strength-2
      entity_category: diagnostic

  - platform: template
    name: "${esp_name} Uptime"
    id: uptime_human
    icon: mdi:clock-start

  - platform: version
    name: "${esp_name} ESPHome Version"
    entity_category: diagnostic

  - platform: sun
    id: sunrise
    name: Sun Next Sunrise
    type: sunrise
    format: "%H:%M"
    internal: true
    update_interval: never

  - platform: sun
    id: sunset
    name: Sun Next Sunset
    type: sunset
    format: "%H:%M"
    internal: true
    update_interval: never

  - platform: homeassistant
    entity_id: sun.sun
    id: sun_ha
    internal: true

  - platform: homeassistant
    entity_id: sensor.moon
    id: moon
    internal: true

  - platform: homeassistant
    id: sonos_title
    entity_id: media_player.office_sonos
    attribute: media_title
  - platform: homeassistant
    id: sonos_artist
    entity_id: media_player.office_sonos
    attribute: media_artist

  - platform: homeassistant
    id: apple_tv_title
    entity_id: media_player.apple_tv_bedroom
    attribute: media_title
  - platform: homeassistant
    id: apple_tv_artist
    entity_id: media_player.apple_tv_bedroom
    attribute: media_artist

graph:
  - id: temperature_graph
    sensor: temperature
    width: 400
    height: 100
    x_grid: 5min
    y_grid: 1.0
    duration: 60min
    line_thickness: 4
    line_type: SOLID
#   - id: windspeed_graph
#     width: 400
#     height: 100
#     x_grid: 5min
#     y_grid: 1.0
#     duration: 60min
#     traces:
#       - sensor: windspeed
#         line_type: SOLID
#         line_thickness: 6

display:
  - platform: lilygo_t5_47
    id: t5_display
    full_update_every: 1 # optional (default:  1): 0 - never, 1 (default) - every, 2+ - throttled
    cycles_render: 20 # optional (default: 20): higher number -> less ghosting, crisper image, more time
    cycles_invert: 20 # optional (default: 20): higher number -> more timef or full update, but mor burn-in protection
    update_interval: 120s
    lambda: |-
      #define ICON_temp        "\U000F0510"

      it.printf(20, 5, id(norican_60), "Header");

      // it.image(20, 110, id(music));
      it.printf(70, 92, id(text_25_bold), "%s", id(sonos_title).state.c_str());
      it.printf(70, 117, id(text_25), "%s", id(sonos_artist).state.c_str());
      // it.printf(70, 146, id(text_20), "Battery: %.0f%%", id(sonos_battery).state);

      // it.image(20, 195, id(tv));
      it.printf(70, 188, id(text_25_bold), "%s", id(apple_tv_title).state.c_str());
      it.printf(70, 212, id(text_25), "%s", id(apple_tv_artist).state.c_str());      

      it.printf(535, 22, id(font_icons_small), ICON_temp);
      it.printf(585, 10, id(din_med), "Temperature: %.1f °C", id(temperature).state);
      it.printf(585, 45, id(text_25), "Min: %.1f °C / Max: %.1f °C", id(min_temp).state, id(max_temp).state);
      it.graph(535, 85, id(temperature_graph));

      //it.image(535, 445, id(rain_pic));
      it.printf(585, 390, id(din_med), "Rain Probability:");
      it.printf(585, 495, id(text_25_bold), "0hr");
      it.printf(660, 495, id(text_25_bold), "1hr");
      it.printf(740, 495, id(text_25_bold), "2hr");
      it.printf(820, 495, id(text_25_bold), "3hr");
      it.printf(900, 495, id(text_25_bold), "4hr");
      it.printf(585, 445, id(text_25), " 0hr");
      it.printf(660, 445, id(text_25), " 1hr");
      it.printf(740, 445, id(text_25), " 2hr");
      it.printf(820, 445, id(text_25), " 3hr");
      it.printf(900, 445, id(text_25), " 4hr");
      it.line(640, 440, 640, 525);
      it.line(720, 440, 720, 525);
      it.line(800, 440, 800, 525);
      it.line(880, 440, 880, 525);

      it.strftime(20, 480, id(din_big), TextAlign::BASELINE_LEFT, "%I:%M %p", id(ntp).now());
      it.strftime(20, 520, id(din_med), TextAlign::BASELINE_LEFT, "%B%e, %Y - %A", id(ntp).now());
