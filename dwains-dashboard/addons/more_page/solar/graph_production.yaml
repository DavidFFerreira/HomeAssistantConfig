---
type: custom:config-template-card
entities:
  - sensor.sunrise
  - sensor.sunset
  - sensor.sungrowsolar_total_pv_power_kw
  - sensor.sungrowsolar_power_meter_kw
  - sensor.sungrowsolar_export_power_kw
card:
  type: custom:apexcharts-card
  graph_span: 24h
  header:
    show: true
    show_states: true
    colorize_states: true
    title: "Solar Production"
  span:
    start: day

  all_series_config:
    stroke_width: 2
    type: line
    curve: smooth
    extend_to_end: false
    unit: kW
  color_list:
    - rgb(35, 155, 86)
    - rgb(229, 152, 102)
    - rgb(241, 148, 138)
    - rgb(208, 236, 231)
    - rgb(232, 246, 243)
  apex_config:
    annotations:
      xaxis:
        - x: "${new Date(states['sensor.sunrise'].state).getTime()}"
          label:
            text: â˜¼
            borderWidth: 0
            style:
              background: "#0000"
        - x: "${new Date(states['sensor.sunset'].state).getTime()}"
          label:
            text: â˜¾
            borderWidth: 0
            style:
              background: "#0000"
    tooltip:
      x:
        format: "ddd dd MMM - HH:mm"
    legend:
      show: false
    grid:
      borderColor: "#7B7B7B"
    chart:
      height: 450
      foreColor: "#7B7B7B"
      zoom:
        type: x
        enabled: true
        autoScaleYaxis: true
      toolbar:
        show: true
        autoSelected: zoom
        tools:
          zoom: true
          zoomin: false
          zoomout: false
          pan: false
          reset: true
    xaxis:
      {
        type: "datetime",
        labels: { datetimeFormatter: { month: "ddd", day: "ddd" } },
      }
    yaxis:
      - seriesName: "kW"
        decimalsInFloat: 0
        max: 5
        title:
          text: "kW"
      # - seriesName: Night time
      #   opposite: true
      #   show: false
    stroke: { show: true, lineCap: "square", dashArray: [0, 0, 0, 5, 5] }
    # fill:
    #   {
    #     type: ["gradient", "gradient", "solid"],
    #     gradient:
    #       {
    #         shadeIntensity: 1,
    #         inverseColors: false,
    #         opacityFrom: 0.45,
    #         opacityTo: 0.05,
    #         stops: [20, 100, 100, 100],
    #       },
    #   }
  series:
    - entity: sensor.sungrowsolar_total_pv_power_kw
      name: Solar Generation
      stroke_width: 4
      group_by:
        func: max
        duration: 5min
    - entity: sensor.sungrowsolar_power_meter_kw
      name: House Consumption
      group_by:
        func: max
        duration: 5min
    - entity: sensor.sungrowsolar_export_power_kw
      name: Grid
      group_by:
        func: max
        duration: 5min
    - entity: sensor.solcast_forecast_average_30min
      name: Forecast
      fill_raw: last
    - entity: sensor.solcast_forecast
      show:
        in_header: false
      data_generator: |
        return entity.attributes.forecasts.map((entry) => {
          return [new Date(entry.period_end), entry.pv_estimate];
        });
