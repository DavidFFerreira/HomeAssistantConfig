cards:
- card:
    aspect_ratio: ''
    entity: binary_sensor.mongo
    icon: '[[[ return entity.attributes.icon ]]]'
    label: "[[[\n  if (variables.description) {\n    return variables.description\n\
      \  }\n  return undefined\n]]]\n"
    show_icon: true
    show_label: true
    show_name: false
    show_state: true
    state_display: '[[[ return variables.summary ]]]'
    styles:
      card:
      - background-color: transparent
      - justify-self: start
      - border-radius: 0
      - box-shadow: none
      - margin: 0 0 0 0
      - padding: 0 0 0 0
      - max-width: 100%
      grid:
      - grid-template-areas: "[[[\n  if (variables.description || variables.show_last_changed)\
          \ {\n    return '\"i s\" \"i l\"'\n  } else {\n    return '\"i s\"'\n  }\n\
          ]]]\n"
      - grid-template-columns: 0.05fr 0.85fr
      - grid-template-rows: "[[[\n  if (variables.description || variables.show_last_changed)\
          \ {\n    return 'min-content min-content'\n  } else {\n    return 'min-content'\n\
          \  }\n]]]\n"
      icon:
      - width: 2.5rem
      - color: "[[[\n  if (!entity) {\n    return 'var(--custom-icon-color-not-active)'\n\
          \  }\n  var state = entity.state\n  if (variables.state_colors) {\n    var\
          \ color = variables.state_colors[state]\n    if (color) {\n      return\
          \ color\n    }\n  }\n  if (variables.icon_color) {\n    return variables.icon_color\n\
          \  }\n  return 'var(--custom-icon-color-not-active)'\n]]]\n"
      - filter: "[[[\n  if (!entity) {\n    return 'none'\n  }\n  var state = entity.state\n\
          \  if (variables.state_colors) {\n    var color = variables.state_colors[state]\n\
          \    if (color) {\n      return `drop-shadow(0 0 var(--button-card-icon-drop-shadow-size)\
          \ ${color})`\n    }\n  }\n  if (variables.icon_color) {\n    return `drop-shadow(0\
          \ 0 var(--button-card-icon-drop-shadow-size) ${variables.icon_color})`\n\
          \  }\n  return 'none'\n]]]\n"
      - transition: all 2s ease
      img_cell:
      - background-color: transparent
      - border-radius: 0
      - justify-self: start
      - background-color: var(--custom-color-icon-background)
      - border-radius: 50%
      - width: 3rem
      - height: 3rem
      - place-self: center
      - -webkit-box-shadow: "[[[\n  if (!variables.icon_glow) {\n    return 'none'\n\
          \  }\n  var state = entity.state\n  if (variables.state_colors) {\n    var\
          \ color = variables.state_colors[state]\n    if (color) {\n      return\
          \ '0 0 var(--button-card-img-cell-box-shadow-size) ' + color\n    }\n  }\n\
          \  if (variables.icon_color) {\n    return '0 0 var(--button-card-img-cell-box-shadow-size)\
          \ ' + variables.icon_color\n  }\n  return 'none'\n]]]\n"
      - box-shadow: "[[[\n  if (!variables.icon_glow) {\n    return 'none'\n  }\n\
          \  var state = entity.state\n  if (variables.state_colors) {\n    var color\
          \ = variables.state_colors[state]\n    if (color) {\n      return '0 0 var(--button-card-img-cell-box-shadow-size)'\
          \ + color\n    }\n  }\n  if (variables.icon_color) {\n    return '0 0 var(--button-card-img-cell-box-shadow-size)\
          \ ' + variables.icon_color\n  }\n  return 'none'\n]]]\n"
      - transition: all 2s ease
      label:
      - padding: 0 0 0 0
      - filter: opacity(40%)
      - font-size: 0.9rem
      - justify-self: start
      - text-overflow: unset
      - white-space: unset
      - word-break: break-word
      - text-align: initial
      - text-justify: none
      name:
      - justify-self: start
      - align-self: center
      state:
      - padding: 0 0 0 0
      - font-weight: 300
      - justify-self: start
      - font-size: 1rem
    type: custom:button-card
    variables:
      active: true
      description: Summary Line
      icon_color: lightgreen
      icon_glow: false
      show_last_changed: true
      summary: Mongo Update Available
  conditions:
  - entity: binary_sensor.mongo
    state: 'on'
  type: conditional
- custom_fields:
    date:
      card:
        entity: '[[[ return variables.entity_date ]]]'
        show_icon: false
        show_label: false
        show_name: false
        show_state: true
        state_display: "[[[\n  if (variables.entity_date) {\n    var date = variables.entity_date.state\n\
          \    var lang = navigator.language || navigator.userLanguage\n    const\
          \ opts = { weekday: 'long', month: 'long', day: 'numeric' }\n    return\
          \ new Intl.DateTimeFormat(lang, opts).format(date)\n  }\n  return ''\n]]]\n"
        styles:
          card:
          - border-radius: 0
          - background-color: transparent
          - box-shadow: none
          - padding: 0 1rem 0 0
          - border-right: 0.1rem solid rgba(var(--primary-text-color-rgb), 0.4)
          - justify-self: end
          grid:
          - grid-template-areas: '"s"

              '
          - grid-template-columns: min-content
          - grid-template-rows: min-content
          state:
          - background-color: transparent
          - font-size: 1.2rem
          - justify-self: end
          - align-self: start
          - filter: opacity(40%)
        type: custom:button-card
    temp:
      card:
        entity: "[[[\n  if (variables.entity_temperature) {\n    return variables.entity_temperature\n\
          \  } else if (variables.entity_weather) {\n    return variables.entity_weather\n\
          \  } else {\n    return undefined\n  }\n]]]\n"
        extra_styles: "span.unit {\n  font-size: 1.4rem;\n}\n"
        show_icon: false
        show_label: false
        show_name: false
        show_state: true
        state_display: "[[[\n  var temperature = states[variables.entity_weather].attributes.temperature\n\
          \  if (variables.entity_temperature) {\n    temperature = states[variables.entity_temperature].state\n\
          \  }\n  return `<div><span class=\"value\">${temperature}</span><span class=\"\
          unit\">&degC</span></div>`\n]]]\n"
        styles:
          card:
          - background-color: transparent
          - box-shadow: none
          grid:
          - grid-template-areas: '"s"

              '
          - grid-template-columns: 1fr
          - grid-template-rows: 1fr
          state:
          - justify-self: center
          - align-self: center
          - font-weight: 300
          - font-size: 2rem
          - filter: opacity(40%)
        type: custom:button-card
    weather:
      card:
        entity: '[[[ return variables.entity_weather ]]]'
        entity_picture: '[[[ return `/local/weather/${states[variables.entity_weather].state}.svg`
          ]]]'
        show_entity_picture: true
        show_icon: false
        show_label: false
        show_name: false
        show_state: false
        styles:
          card:
          - background-color: transparent
          - box-shadow: none
          grid:
          - grid-template-areas: '"i"

              '
          - grid-template-columns: 1fr
          - grid-template-rows: 1fr
          icon:
          - width: 4.0rem
          - height: 3.5rem
          img_cell:
          - justify-content: center
        type: custom:button-card
  entity: sensor.time
  show_icon: false
  show_label: false
  show_last_changed: false
  show_name: false
  show_state: true
  styles:
    card:
    - background-color: transparent
    - border-radius: none
    - box-shadow: none
    - width: 100%
    custom_fields:
      date:
      - align-self: start
      - justify-self: end
      temp:
      - place-self: start center
      - padding-top: 0.25rem
      - margin-left: 0.8rem
      weather:
      - place-self: end center
      - padding-bottom: 0.25rem
      - margin-left: 0.8rem
    grid:
    - grid-template-areas: "[[[\n  if (variables.entity_weather && variables.entity_date)\
        \ {\n    return '\"s weather\" \"s weather\" \"s temp\" \"date temp\"'\n \
        \ } else if (variables.entity_weather && !variables.entity_date) {\n    return\
        \ '\"s weather\" \"s temp'\n  } else if (variables.entity_date) {\n    return\
        \ '\"s\" \"date\"'\n  } else {\n    return '\"s\"'\n  }\n]]]\n"
    - grid-template-columns: "[[[\n  if (variables.entity_weather) {\n    return 'min-content\
        \ max-content'\n  } else {\n    return 'min-content'\n  }\n]]]\n"
    - grid-template-rows: "[[[\n  if (variables.entity_weather && variables.entity_date)\
        \ {\n    return 'repeat(4, min-content)'\n  } else if (variables.entity_weather\
        \ && !variables.entity_date) {\n    return 'repeat(2, min-content)'\n  } else\
        \ if (variables.entity_date) {\n    return 'repeat(2, min-content)'\n  } else\
        \ {\n    return '1fr'\n  }\n]]]\n"
    state:
    - font-weight: 200
    - font-size: 5rem
    - background-color: transparent
    - justify-self: end
    - align-self: end
    - padding-right: 0.8rem
    - border-right: 0.1rem solid rgba(var(--primary-text-color-rgb), 0.4)
  type: custom:button-card
  variables:
    entity_date: sensor.date
    entity_temperature: sensor.tempest_st_00056115_temperature
    entity_weather: weather.east_tamworth_hourly
  view_layout:
    grid-area: clock
    place-self: start center
col_span: '2'
col_span_lg: '3'
col_span_xl: '4'
items_classes: col-xs-4
padding: false
position: top
row_span: '1'
row_span_lg: '1'
row_span_xl: '1'
type: custom:dwains-flexbox-card
